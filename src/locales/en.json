{
  "navigator": {
    "top": "to top",
    "works": "works",
    "contact": "contact"
  },

  "header": {
    "tagline": "Want me to make something awesome for you?",
    "contact": "Let's get in touch!"
  },

  "hero": {
    "welcome": "Welcome!",
    "name": "My name is Tom√°s",
    "job": "Full Stack Web Developer",
    "tagline": "Trying to make the web a little bit more awesome",
    "repo": "Portfolio Repository",
    "projects": "Check out some of my Works",
    "trivia": [
      "Let me tell you a little about me...",
      "Self-taught developer,",
      "Living in Argentina,",
      "Graduated in Advertising,",
      "Very detail oriented,",
      "I love clean code,",
      "People enjoying my apps,",
      "Prefer things simple,",
      "Polished,",
      "Elegant,",
      "Responsive,",
      "Snappy,",
      "Fun"
    ]
  },

  "itemRunner": {
    "rewind": "Rewind?"
  },

  "skills": {
    "frontTitle": "Front End Skills",
    "backTitle": "Back End Skills",
    "frontDescription": "<p>I mostly develop <strong class=\"skill\">Vue.js</strong> web apps setting them up using <strong class=\"skill\">Webpack</strong> and <strong class=\"skill\">npm</strong>. The building blocks I use according the projects needs are <strong class=\"skill\">HTML5</strong>, <strong class=\"skill\">CSS3 + Sass</strong> and <strong class=\"skill\">Javascript</strong>. </p><p>I also have also worked on projects using <strong class=\"skill\">React</strong> and <strong class=\"skill\">Wordpress</strong>. </p><p>My main focus when developing is keeping the codebase as <strong>organized</strong> and <strong>efficient</strong> as possible while making sure the end product is <strong>easy</strong> and <strong>enjoyable</strong> for people to use. </p>",
    "backDescription": "<p>I mostly use <strong class=\"skill\">Ruby on Rails</strong> using <strong class=\"skill\">PostgreSQl</strong> or <strong class=\"skill\">MySQL</strong> as database.</p><p>Usually I prefer setting the back end as an API for front end apps to use. But there are always exceptions where it makes more sense to focus the action on the server.</p><p>Although my main framework is <strong class=\"skill\">Rails</strong> I am open to alternatives. I'm currently learning <strong class=\"skill\">Node.js</strong> with <strong class=\"skill\">Express</strong> and I have even used <strong class=\"skill\">Wordpress's REST API</strong> as the back end of a <strong class=\"skill\">Vue</strong> based online catalog.</p>",
    "flip": "press to flip"
  },

  "projects": {
    "title": "Projects",
    "flip": "flip",
    "site": "Visit Site",
    "code": "Source Code"
  },

  "contact": {
    "title": "Let's talk!",
    "question": "Do you have any project or idea that needs my help?",
    "contactMe": "Contact me using the form below, I will get back to you shortly and we will build something great!",
    "name": "Name",
    "namePlaceholder": "Mr. Firstand Lastname",
    "emailPlaceholder": "me@example.com",
    "confirm": "Email Confirm",
    "message": "Your message",
    "send": "Send",
    "verify": "Verify!",
    "thanks": "Thanks for your message!",
    "backToYou": "I will get back to you shortly.",
    "goodDay": "Have a nice day!"
  }
}
